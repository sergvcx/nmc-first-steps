= 1.16 Урок 12: Использование Векторного Регистра VR
Исходный текст примера, используемого в данном уроке, содержится в файле `step12.asm` в каталоге: `..\Tutorial\Step12`
Пример демонстрирует использование регистра `vr` для добавления одинаковой константы ко всем элементам массива 16-разрядных чисел. 




*Файл “main.cpp”*
[code,cpp]
----
include::main.cpp[]
----


*Файл “Step12.S”*
[code,asm]
----
include::Step12.S[]
----

== Комментарии к Примеру
Функция AddBias добавляет к каждому 16-разрядному элементу векторов входных данных константу. Операция выполняется на векторном процессоре с использованием регистра `vr`. 
Регистр `vr` обладает тем преимуществом, что не требует долгой  загрузки и не зависит от количества обрабатываемых векторов. Он задумывался, как регистр, хранящий константу, добавляемую ко всем элементам вектора, полученного в результате взвешенного суммирования. Это, в некотором смысле, альтернатива буферу `ram`, в котором хранятся одинаковые константные вектора.  В отдельных случаях регистр `vr` позволяет пользователю высвободить основные буфера ВП (`ram`, `data`, `afifo`), заменив их в качестве операнда Y в операции взвешенного суммирования. Более подробная информация  о регистре `vr` содержится в пункте 3.3.4 Регистр vr документа NeuroMatrix NM6403. Описание Языка Ассемблера. 
Инструкция 
`vr = [--ar5];`
загружает вектор констант из стека в 64-разрядный регистр `vr`.
Инструкция
`rep 32 data = [ar0++] with vsum , data, vr;`
добавляет вектор констант, хранящийся в `vr`, к результату взвешенного суммирования.


== Компиляция Примера 
Для компиляции примера необходимо в командной строке ввести команду: 
`nmcc -g -m Step12.asm main.cpp –oStep12.abs`



