.global _ReverseBits
.p2align 3            	  	// директива для выравнивания секции по  чётному адресу.	
.data	      // весовые коэффициенты для перестановки битов
    Weights: .quad          1<<63, 1<<61, 1<<59, 1<<57, \
                            1<<55, 1<<53, 1<<51, 1<<49, \
                            1<<47, 1<<45, 1<<43, 1<<41, \
                            1<<39, 1<<37, 1<<35, 1<<33, \
                            1<<31, 1<<29, 1<<27, 1<<25, \
                            1<<23, 1<<21, 1<<19, 1<<17, \
                            1<<15, 1<<13, 1<<11, 1<< 9, \
                            1<< 7, 1<< 5, 1<< 3, 1<< 1, \
                            1<<62, 1<<60, 1<<58, 1<<56, \
                            1<<54, 1<<52, 1<<50, 1<<48, \
                            1<<46, 1<<44, 1<<42, 1<<40, \
                            1<<38, 1<<36, 1<<34, 1<<32, \
                            1<<30, 1<<28, 1<<26, 1<<24, \
                            1<<22, 1<<20, 1<<18, 1<<16, \
                            1<<14, 1<<12, 1<<10, 1<< 8, \
                            1<< 6, 1<< 4, 1<< 2, 1<< 0  
	


.macro SET reg,val
#if __NM4__== 0
	\reg = \val; 
#else
	sir = \val; 
	\reg = sir;   
#endif
.endm

.text	
_ReverseBits:	
	ar5 = ar7 - 2;	
	push ar0, gr0;	
		
	ar0 = Weights;	  //в ar0 загружается адрес массива весов для матрицы ВП 
			
	//nb1 = 0FFFFFFFFh; // 64 столбца
	//sb  = 0FFFFFFFFh; // 32 строки
	SET nb1, 0FFFFFFFFh
	SET sb , 0FFFFFFFFh
		
	// загрузка первого набора весовых коэффициентов в рабочую матрицу
	rep 32 wfifo = [ar0++],ftw, wtw;
	// загрузка второго набора весовых коэффициентов в теневую матрицу
	rep 32 wfifo = [ar0++],ftw;
	
    // слово входных данных напрямую из стека загружается в ram и одновременно подаётся 
    // на вход Х матричного устройства умножения
    rep 1 ram = [--ar5] with vsum , data, 0;
    wtw;
    // после обновления коэффициентов тоже слово входных данных подаётся из ram 
    // на вход Х, а по пути циклически сдвигается на 1 бит вправо 
    rep 1 with vsum , shift ram, afifo;
    rep 1 [ar5] = afifo;
	
	gr7 = [ar5++];	  //младшее слово вектора результата - в gr7
	gr6 = [ar5++];	  //старшее слово вектора результата - в gr6
	
	pop ar0, gr0;	
	return;	
		
	
