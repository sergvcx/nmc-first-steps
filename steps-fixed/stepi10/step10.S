.global _AddSaturate

.p2align 3                      // директива для выравнивания секции по  чётному адресу.    
.data    
    Masks: 
        .quad 0x0000000000000001      // матрица для первого прохода
        .quad 0x0000000000010000    
        .quad 0x0000000100000000    
        .quad 0x0001000000000000    
        
        .rept 4
        .quad 0x0000000000000000     
        .endr
    
        .quad 0x0000000000000001      // матрица для второго прохода
        .quad 0x0000000000000100    
        .quad 0x0000000000010000    
        .quad 0x0000000001000000    
      
                                      // матрица для третьего       
        .rept 4
        .quad 0x0000000000000000     
        .endr
      
        .quad 0x0000000000000001     // прохода
        .quad 0x0000000000010000
        .quad 0x0000000100000000
        .quad 0x0001000000000000
        .quad                   
        .quad 0x0000000100000000     // матрица для четвертого 
        .quad 0x0000010000000000     // прохода
        .quad 0x0001000000000000
        .quad 0x0100000000000000    

.macro SET reg,val
#if __NM4__== 0
    \reg = \val; 
#else
    sir = \val; 
    \reg = sir;   
#endif
.endm

.text    
_AddSaturate:    
    ar5 = ar7 - 2;    
    push ar0, gr0;    
    push ar1, gr1;    
    push ar4, gr4;    
    push ar6, gr6;    
        
    gr0 = [--ar5];    // первый входной параметр (SRC1)
    gr1 = [--ar5];    // второй входной параметр (SRC2)
    ar4 = [--ar5];    // третий входной параметр (DST)
        
    ar0 = gr0;    
    ar1 = gr1;    
        
    ar6 = Masks;              // адрес буфера, хранящего весовые коэффициенты
        
    SET f1cr, 0FF80FF80h    // конфигурация арифметической функции активации
        
    // определение конфигурации рабочей матрицы для первого шага вычислений
    //   nb1 = 80008000h;      // 4 столбца
    //   sb  = 03030303h;      // 8 строк
    SET nb1, 80008000h
    SET sb,  03030303h
        
    // сразу все весовые коэффициенты (для четырех матриц) загружаются в wfifo,
    // а в теневую матрицу передаЄтся только 8 слов в соответствии со значениями sb и nb1
    rep 24 wfifo = [ar6++],ftw, wtw;
    
    // поскольку рабочая матрица уже загружена, можно приступить к загрузке теневой 
    // матрицы новой порцией весовых коэффициентов и определить новую конфигурацию.
    
    SET nb1, 80808080h
    SET sb , 00030003h
    // вычисления на рабочей матрице выполняются параллельно с загрузкой теневой,
    // следующие две инструкции выполняют преобразование  разрядностей и поэлементное 
    // сложение входных векторов.
    rep 32 data = [ar0++], ftw with vsum , data, 0;
    rep 32 data = [ar1++] with vsum , data, afifo;
    
    wtw;              // копирование теневой матрицы в рабочую
    
    SET nb1, 80008000h
    SET sb,  03030303h
    // выполнение арифметической активации с последующим преобразованием разрядности
    rep 32 ftw with vsum , activate afifo, 0;
    
    // возвращение к началу исходных массивов для обработки вторых половин векторов
    ar0 = gr0;
    ar1 = gr1;
    // сохранение результатов первого шага преобразования в ram
    rep 32 [ar4],ram = afifo;
    wtw;
    
    // второй шаг вычислений полностью повторяет первый, отличие в весах матрицы.
    SET nb1, 80808080h
    SET sb,  00030003h
    
    rep 32 data = [ar0++], ftw with vsum , data, 0;
    rep 32 data = [ar1++] with vsum , data, afifo;
    
    wtw;    
    // инструкция активируют данные, преобразует размерность и складывает с 
    // результатом первого прохода.  
    rep 32 with vsum , activate afifo, ram;
    
    // результат вычислений сохраняется в памяти.
    rep 32 [ar4++] = afifo;
    
    pop ar6, gr6;      // восстановление регистровых пар из стека
    pop ar4, gr4;    
    pop ar1, gr1;    
    pop ar0, gr0;    
    return;    
        
    
