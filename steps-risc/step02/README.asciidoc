= Доступ к Памяти
Исходный текст примера, используемого в данном уроке, содержится в файле `step2.asm` в каталоге: `..\Tutorial\Step2`.
Пример демонстрирует описание различных типов секций данных, а также методы доступа к памяти.

*Файл “step2.S”*
[code,asm]
----
include::step2.S[]
----

== Комментарии к Примеру
В примере описаны секции инициализированных и неинициализированных данных.
В секциях инициализированных данных содержатся объявления и инициализация переменных, используемых программой. Секция данного типа начинается с открывающей скобки `data` и заканчивается словом `end` (закрывающая скобка), например:
`data ".MyData"`
`	A: word = 1;`
`	B: word = 2;`
`end ".MyData";`
Объявление переменной имеет вид “`имя_переменной : тип`”, например “`A: word`”. Начальное значение или список начальных значений следует за объявлением типа переменной и предваряется знаком “`=`”. 
`A: word = 1;// (Подробнее см. раздел 2.3.2 Описания Языка 
                             // Ассемблера для NM6403)`
В секциях неинициализированных данных содержатся только объявления переменных, используемых программой, без их инициализации. Секция данного типа начинается с открывающей скобки `nobits` и заканчивается словом `end`. Пример:
`nobits ".MyData1"`
`  global C: word[2];	// массив из 2-х 32-разрядных слов`
`end ".MyData1";`
Секция кода демонстрирует команды чтения из памяти: 

• Получение адреса переменной. Для этого достаточно просто использовать ее имя: 
`ar0 = A;` 
(в адресный  регистр ar0 загружаем адрес переменной `А`)
• Косвенное чтение из памяти в регистр общего назначения `gr0` 
gr0 = [ar0];	
• Получение значения переменной. Для этого необходимо ее имя заключить в квадратные скобки.
`gr1 =[B];` //  прямое чтение из памяти в  регистр общего назначения
(в регистр общего назначения gr1 загрузили значение переменной `B`).


Команда `[ar0++] = gr2;` выполняет косвенную запись в память из регистра общего назначения с пост-инкрементацией адреса. Это означает, что по адресу, указанному в `ar0` записывается значение, содержащееся в `gr2`, после чего ar0 увеличивается на 1.
Команда `gr7 = [--ar0];` выполняет косвенное чтение из памяти в регистр общего назначения с пре-декрементацией адреса, то есть перед тем, как считать значение из памяти, адрес уменьшается на 1. 
В целом, программа помещает в `C[0]` значение `A+B`, в `C[1]` значение `A-B`, а в регистр `gr7` попадает значение `C[1]`. 

== Компиляция Примера 
Для компиляции примера `step2.asm` необходимо в командной строке ввести команду: 
`nmcc -g step2.asm libc.lib -m`
