= Доступ к Памяти
Исходный текст примера, используемого в данном уроке, содержится в файле `step2.S` в каталоге: 
`\steps-risc\step02`.

Пример демонстрирует описание различных типов секций данных, а также методы доступа к памяти.


*Файл “step2.S”*
[code.S]
----
include::step2.S[]
----

== Комментарии к Примеру
В примере описаны секции инициализированных и неинициализированных данных.
В секциях инициализированных данных содержатся объявления и инициализация переменных, используемых программой.
```
.section .data.MyData	     // секция инициализированных данных.
    A: .long 1	
    B: .long 2	
```
Объявление переменной имеет вид `имя_переменной : тип`, например `A: .long`. Начальное значение или список начальных значений следует за объявлением типа переменной. 
Тип `.long`  соответствует 32-битному целому числу. 
Тип `.quad`  соответствует 64-битному целому числу. 

В секциях неинициализированных данных содержатся только объявления переменных, используемых программой, без их инициализации.  Пример:
```
.section .bss.MyData1    // секция неинициализированных данных.
	C: .space 2<<2
```
Означает что по адресу `С` зарезервировано область памяти размером 8 байт.
Секция кода демонстрирует команды чтения из памяти: 

• Получение адреса переменной. Для этого достаточно просто использовать ее имя: 
`ar0 = A;` 
(в адресный  регистр `ar0` загружаем адрес переменной `А`)
• Косвенное чтение из памяти в регистр общего назначения `gr0`. `gr0 = [ar0];`	
• Получение значения переменной. Для этого необходимо ее имя заключить в квадратные скобки.
`gr1 =[B]; //  прямое чтение из памяти в  регистр общего назначения`
(в регистр общего назначения `gr1` загрузили значение переменной `B`).


Команда `[ar0++] = gr2;` выполняет косвенную запись в память из регистра общего назначения с пост-инкрементацией адреса. Это означает, что по адресу, указанному в `ar0` записывается значение, содержащееся в `gr2`, после чего `ar0` увеличивается на 1.
Команда `gr7 = [--ar0];` выполняет косвенное чтение из памяти в регистр общего назначения с пре-декриментацией адреса, то есть перед тем, как считать значение из памяти, адрес уменьшается на 1. 
В целом, программа помещает в `C[0]` значение `A+B`, в `C[1]` значение `A-B`, а в регистр `gr7` попадает значение `C[1]`. 

