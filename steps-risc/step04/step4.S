.global __main        // объявление глобальной метки.
	
.section .data.MyData  // секция инициализированных данных
    // массив А из 16 64-разрядных слов заполняется начальными значениями
   .global A
   A: .quad   0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
	
	
.section .bss.MyData1 // секция неинициализированных данных.
   .global B
   B: .space 16<<3    // объявляется массив В из 16 64-разрядных слов
   .global C
   C: .space 16<<3    // объявляется массив С из 16 64-разрядных слов
	
	
.section .text.AAA    // начало секции кода.
__main:	
    // простое копирование массива данных на скалярном процессоре
    ar0 = A;	
    ar1 = B;	
    gr1 = 32;         // счётчик цикла (32 цикла для копирования 16 64-bit слов)
    gr1--;            // устанавливается флаг для первого вхождения в цикл
Loop:	
    // если условие выполнено, осуществляется отложенный переход на метку Loop
    if > delayed goto Loop  with gr1--;
    // чтение из памяти  32-разрядного слова
    gr2 = [ar0++];
    // запись в память 32-разрядного слова
    [ar1++] = gr2;
	
    // копирование массива данных при помощи регистровых пар
    ar0 = A;	
    ar1 = C;	
    gr1 = 16;         // счётчик цикла (16 циклов для копирования 16 64-bit слов)
    gr1--;            // устанавливается флаг для первого вхождения в цикл
Loop1:	
    // если условие выполнено, осуществляется отложенный переход на метку Loop1
    if > delayed goto Loop1 with gr1--;
    // чтение из памяти  64-разрядного слова
	ar2,gr2 = [ar0++];
    // запись в память 64-разрядного слова
    [ar1++] = ar2,gr2;
	
    return;	

