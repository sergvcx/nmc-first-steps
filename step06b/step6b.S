.global __main        // объявление глобальной метки.
	
.section .data.MyData  // секция инициализированных данных
    // массив А заполняется 64-мя единицами
    A: 
	.rept 64 
	.quad 0x0000000000000001
	.endr
    // вектор, используемый для суммирования строк матрицы весов
    Vect: .quad 0x5555555555555555
	
	
.section .data.MyData1
    Temp: .long       // временный буфер для хранения промежуточных
                      // результатов
	
.section .text.AAA    // начало секции кода
__main:	
    ar1 = A;	
#if __NM4__== 0
    nb1 = 80000000h;  // матрица делится на два столбца
    sb  = 0AAAAAAAAh; // и на 32 строки
#else
    sir = 80000000h;  // матрица делится на два столбца
	nb1 = sir;
    sir  = 0AAAAAAAAh; // и на 32 строки
	sb  = sir;
#endif

		
		
    // элементы массива A загружаются в буфер wfifo
    rep 32 wfifo = [ar1++], ftw, wtw;
	
    ar2 = Vect;	
    ar4 = Temp;	
    //на вход Х рабочей матрицы подается Vect
    rep 1 data = [ar2] with vsum , data, 0;
    // результат операции выгружается из afifo в Temp
    rep 1 [ar4] = afifo;
	
    ar0,gr0 = [ar4];  // из памяти считывается пара значений 
    gr1 = ar0;        // над адресными регистрами нельзя совершать арифметические операции, поэтому содержимое ar0 копируется в gr1.
    // возвращаемое программой значение записывается в регистр gr7
    return with gr7 = gr1 + gr0;

